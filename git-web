#!/bin/bash

function open_command {
    printf "%s" "$(git config web.opencommand)"
}

function pulls_path {
    DOMAIN="$1"
    if [[ "$DOMAIN" == "gitlab.com" ]]; then
        printf "merge-requests/"
    elif [[ "$DOMAIN" == "github.com" ]]; then
        printf "pulls/"
    elif [[ "$DOMAIN" == "bitbucket.org" ]]; then
        printf "pull-requests/"
    elif target="$(git config "web.$DOMAIN.pulls")"; then
        printf "%s" "$target"
    elif target="$(git config web.default.pulls)"; then
        printf "%s" "$target"
    else
        # if all else fails, assume its github
        printf "pulls/"
    fi
}

function pull_request_path {
    DOMAIN="$1"
    # Right now, we just assume github no matter what
    printf "pull/new/%s/" "$(git rev-parse --abbrev-ref HEAD)"
}

function issues_path {
    DOMAIN="$1"
    if [[ "$DOMAIN" == "gitlab.com" ]]; then
        printf "issues/"
    elif [[ "$DOMAIN" == "github.com" ]]; then
        printf "issues/"
    elif [[ "$DOMAIN" == "bitbucket.org" ]]; then
        printf "issues/"
    elif target="$(git config "web.$DOMAIN.issues")"; then
        printf "%s" "$target"
    elif target="$(git config web.default.issues)"; then
        printf "%s" "$target"
    else
        # if all else fails, assume its github
        printf "issues/"
    fi
}

function get_domain {
    URL="$1"
    # shellcheck disable=SC2003,SC2308
    delimiter="$(expr index "$URL" ://)"

    URL="${URL:$delimiter+2}"
    # shellcheck disable=SC2003,SC2308
    delimiter="$(expr index "$URL" /)"

    URL="${URL:0:$delimiter-1}"
    printf "%s" "$URL"
}

function print_help {
    printf "git-web opens up a browser with the relevant http page for your repository\\n"
    printf "\\n"
    printf "Usage: git web <remote> [--pulls|--issues|--pull-request]\\n"
    printf "\\n"
    printf -- "--help / -h            print this help message\\n"
    printf -- "--pulls / -p           open the pull requests web page\\n"
    printf -- "--pull-request / -pr   open pull request for current branch\\n"
    printf -- "--issues / -i          open the issues web page\\n"
}


DEFAULT_REMOTE="origin"

REMOTE="$DEFAULT_REMOTE"
TARGET="home"

for arg in "${@}"
do
    if [[ "$arg" == "--issues" ]] || [[ "$arg" == "-i" ]]; then
        TARGET="issues"
    elif [[ "$arg" == "--pulls" ]] || [[ "$arg" == "-p" ]]; then
        TARGET="pulls"
    elif [[ "$arg" == "--pull-request" ]] || [[ "$arg" == "-pr" ]]; then
        TARGET="pull_request"
    elif [[ "$arg" == "--help" ]] || [[ "$arg" == "-h" ]]; then
        print_help
        exit 0
    elif [[ "$arg" == "--"* ]] || [[ "$arg" == "-"* ]]; then
        printf "Invalid Option: %s\\n" "$arg"
        exit 1
    else
        REMOTE="$arg"
    fi
done

if ! url="$(git remote get-url "$REMOTE")"; then
    printf "available remotes:\\n"
    printf "%s\\n" "$(git remote)"
    exit 1
fi

if [[ "$url" = "git@"* ]]; then
    url="${url#git@}"

    # shellcheck disable=SC2308
    delimiter="$(expr index "$url" :)"

    domain="${url:0:$delimiter-1}"
    path="${url:$delimiter}"

    target_url="https://$domain/$path"

elif [[ "$url" = "http"* ]]; then
    target_url="$url"

fi

if [[ -n "$target_url" ]]; then
    target_url="${target_url%.git}"

    if [[ "$TARGET" == "issues" ]]; then
        domain="$(get_domain "$target_url")"
        p="$(issues_path "$domain")"
        target_url="$target_url/$p"
    elif [[ "$TARGET" == "pulls" ]]; then
        domain="$(get_domain "$target_url")"
        p="$(pulls_path "$domain")"
        target_url="$target_url/$p"
    elif [[ "$TARGET" == "pull_request" ]]; then
        domain="$(get_domain "$target_url")"
        p="$(pull_request_path "$domain")"
        target_url="$target_url/$p"
    fi

    platform="$(uname)"
    open_command="$(open_command)"

    if [[ -n "$open_command" ]]; then
        "$open_command" "$target_url"
    elif [[ "$platform" = "Linux" ]]; then
        if type xdg-open > /dev/null 2>&1; then
            xdg-open "$target_url" 2>/dev/null
        else
            printf "%s\n" "$target_url"
        fi
    elif [[ "$platform" = "Darwin" ]]; then
        open "$target_url"
    else
        printf "Unknown target platform '%s'\\n" "$platform"
        exit 2
    fi
else
    printf "Could not determine target url to open for '%s' (%s)\\n" "$REMOTE" "$url"
    exit 3
fi
